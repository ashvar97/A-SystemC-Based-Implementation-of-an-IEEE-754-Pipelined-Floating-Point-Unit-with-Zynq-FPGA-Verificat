//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.13
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: ieee754_multiplier ()
//
module ieee754_multiplier // "Top"
(
    input logic [31:0] A,
    input logic [31:0] B,
    input logic reset,
    output logic [31:0] result
);

// Signal declarations
logic A_sign;
logic B_sign;
logic Sign;
logic [7:0] A_exponent;
logic [7:0] B_exponent;
logic [7:0] temp_exponent;
logic [23:0] A_mantissa;
logic [23:0] B_mantissa;
logic [47:0] temp_mantissa;

//------------------------------------------------------------------------------
// Sub-module instances

ieee754_extractor extractA(
    .in(A),
    .reset(reset),
    .sign(A_sign),
    .exponent(A_exponent),
    .mantissa(A_mantissa)
);

ieee754_extractor extractB(
    .in(B),
    .reset(reset),
    .sign(B_sign),
    .exponent(B_exponent),
    .mantissa(B_mantissa)
);

ieee754_multiplier_core multiply(
    .A_mantissa(A_mantissa),
    .B_mantissa(B_mantissa),
    .A_exponent(A_exponent),
    .B_exponent(B_exponent),
    .A_sign(A_sign),
    .B_sign(B_sign),
    .reset(reset),
    .temp_mantissa(temp_mantissa),
    .temp_exponent(temp_exponent),
    .Sign(Sign)
);

ieee754_normalizer normalize(
    .temp_mantissa(temp_mantissa),
    .temp_exponent(temp_exponent),
    .Sign(Sign),
    .reset(reset),
    .result(result)
);

endmodule

//==============================================================================
//
// Module: ieee754_extractor ()
//
module ieee754_extractor // "Top.extractA"
(
    input logic [31:0] in,
    input logic reset,
    output logic sign,
    output logic [7:0] exponent,
    output logic [23:0] mantissa
);

always_comb begin : extract
    if (reset) begin
        sign = 0;
        exponent = 0;
        mantissa = 0;
    end else begin
        sign = in[31];
        exponent = in[30:23];
        mantissa = (24'd1 << 23) | in[22:0];  // Add implicit leading 1
    end
end

endmodule

//==============================================================================
//
// Module: ieee754_multiplier_core ()
//
module ieee754_multiplier_core // "Top.multiply"
(
    input logic [23:0] A_mantissa,
    input logic [23:0] B_mantissa,
    input logic [7:0] A_exponent,
    input logic [7:0] B_exponent,
    input logic A_sign,
    input logic B_sign,
    input logic reset,
    output logic [47:0] temp_mantissa,
    output logic [7:0] temp_exponent,
    output logic Sign
);

always_comb begin : multiply
    if (reset) begin
        temp_mantissa = 0;
        temp_exponent = 0;
        Sign = 0;
    end else begin
        // Multiply mantissas (48-bit result)
        temp_mantissa = A_mantissa * B_mantissa;
        
        // Add exponents and subtract bias (127 for single-precision)
        temp_exponent = A_exponent + B_exponent - 8'd127;
        
        // Determine result sign (XOR of input signs)
        Sign = A_sign ^ B_sign;
    end
end

endmodule

//==============================================================================
//
// Module: ieee754_normalizer ()
//
module ieee754_normalizer // "Top.normalize"
(
    input logic [47:0] temp_mantissa,
    input logic [7:0] temp_exponent,
    input logic Sign,
    input logic reset,
    output logic [31:0] result
);

always_comb begin : normalize
    logic [22:0] mantissa;
    logic [7:0] exponent;
    
    if (reset) begin
        result = 0;
    end else begin
        // Check for overflow in multiplication
        if (temp_mantissa[47]) begin  // If bit 47 is set (overflow)
            mantissa = temp_mantissa[46:24];  // Take upper 23 bits
            exponent = temp_exponent + 1;     // Increment exponent
        end else begin
            mantissa = temp_mantissa[45:23];  // Take next 23 bits
            exponent = temp_exponent;
        end
        
        // Pack result into IEEE 754 format
        result = {Sign, exponent, mantissa};
    end
end

endmodule
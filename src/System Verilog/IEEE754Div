//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.13
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: ieee754_div ()
//
module ieee754_div // "top"
(
    input logic [31:0] a,
    input logic [31:0] b,
    input logic reset,
    output logic [31:0] result
);

// Variables generated for SystemC signals
logic [31:0] a_significand;
logic [31:0] b_significand;
logic a_sign;
logic b_sign;
logic [7:0] a_exp;
logic [7:0] b_exp;


//------------------------------------------------------------------------------
// Child module instances

ExtractModule extract_module
(
  .a(a),
  .b(b),
  .reset(reset),
  .a_significand(a_significand),
  .b_significand(b_significand),
  .a_sign(a_sign),
  .b_sign(b_sign),
  .a_exp(a_exp),
  .b_exp(b_exp)
);

ComputeModule compute_module
(
  .a_significand(a_significand),
  .b_significand(b_significand),
  .a_sign(a_sign),
  .b_sign(b_sign),
  .a_exp(a_exp),
  .b_exp(b_exp),
  .reset(reset),
  .result(result)
);

NormalizationModule normalization_module
(
  .result(result),
  .a_exp(a_exp),
  .reset(reset)
);

endmodule



//==============================================================================
//
// Module: ExtractModule (example.cpp:154:5)
//
module ExtractModule // "top.extract_module"
(
    input logic [31:0] a,
    input logic [31:0] b,
    input logic reset,
    output logic [31:0] a_significand,
    output logic [31:0] b_significand,
    output logic a_sign,
    output logic b_sign,
    output logic [7:0] a_exp,
    output logic [7:0] b_exp
);

//------------------------------------------------------------------------------
// Method process: extract (example.cpp:15:5) 

always_comb 
begin : extract     // example.cpp:15:5
    if (reset)
    begin
        a_significand = 0;
        b_significand = 0;
        a_sign = 0;
        b_sign = 0;
        a_exp = 0;
        b_exp = 0;
    end else begin
        a_exp = (a & 'h7F800000) >>> 23;
        b_exp = (b & 'h7F800000) >>> 23;
        a_sign = (a & 32'h80000000) != 0;
        b_sign = (b & 32'h80000000) != 0;
        a_significand = (a & 'h7FFFFF) | 'h800000;
        b_significand = (b & 'h7FFFFF) | 'h800000;
    end
end

endmodule



//==============================================================================
//
// Module: ComputeModule (example.cpp:155:5)
//
module ComputeModule // "top.compute_module"
(
    input logic [31:0] a_significand,
    input logic [31:0] b_significand,
    input logic a_sign,
    input logic b_sign,
    input logic [7:0] a_exp,
    input logic [7:0] b_exp,
    input logic reset,
    output logic [31:0] result
);

//------------------------------------------------------------------------------
// Method process: compute (example.cpp:50:5) 

always_comb 
begin : compute     // example.cpp:50:5
    logic [31:0] r;
    logic [7:0] result_exp;
    logic [4:0] i;
    logic odd;
    logic rnd;
    logic sticky;
    logic [31:0] x_val;
    logic [31:0] y_val;
    logic [7:0] shift;
    logic result_sign;
    r = 0;
    result_exp = 0;
    i = 0;
    odd = 0;
    rnd = 0;
    sticky = 0;
    x_val = 0;
    y_val = 0;
    shift = 0;
    result_sign = 0;
    if (reset)
    begin
        result = 0;
    end else begin
        r = 0;
        result_exp = 0;
        i = 0;
        x_val = 0;
        y_val = 0;
        shift = 0;
        result_sign = a_sign ^ b_sign;
        result_exp = a_exp - b_exp + 127;
        x_val = a_significand;
        y_val = b_significand;
        if (x_val < y_val)
        begin
            x_val = x_val <<< 1;
            result_exp = result_exp - 1;
        end
        r = 0;
        for (i = 0; i < 25; i++)
        begin
            r = r <<< 1;
            if (x_val >= y_val)
            begin
                x_val = x_val - y_val;
                r = r | 1;
            end
            x_val = x_val <<< 1;
        end
        sticky = x_val != 0;
        if ((result_exp >= 1) && (result_exp <= 254))
        begin
            rnd = |((r & 'h1000000) >>> 24);
            odd = (r & 'h2) != 0;
            r = (r >>> 1) + (rnd & (sticky | odd));
            r = (result_exp <<< 23) + (r - 'h800000);
        end else begin
            if (result_exp > 254)
            begin
                r = 'h7F800000;
            end else begin
                shift = 1 - result_exp;
                if (shift > 25)
                begin
                    shift = 25;
                end
                sticky = sticky | ((r & ~(~0 <<< shift)) != 0);
                r = r >>> shift;
                rnd = |((r & 'h1000000) >>> 24);
                odd = (r & 'h2) != 0;
                r = (r >>> 1) + (rnd & (sticky | odd));
            end
        end
        r = r | (result_sign ? 32'h80000000 : 0);
        result = r;
    end
end

endmodule



//==============================================================================
//
// Module: NormalizationModule (example.cpp:156:5)
//
module NormalizationModule // "top.normalization_module"
(
    input logic [31:0] result,
    input logic [7:0] a_exp,
    input logic reset
);

//------------------------------------------------------------------------------
// Method process: normalize (example.cpp:128:5) 
// Empty process, no code generated 

endmodule



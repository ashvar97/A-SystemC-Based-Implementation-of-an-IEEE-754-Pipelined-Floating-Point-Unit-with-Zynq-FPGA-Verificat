//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.13
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: ieee754_adder ()
//
module ieee754_adder // "float_adder"
(
    input logic [31:0] A,
    input logic [31:0] B,
    output logic [31:0] O
);

// Variables generated for SystemC signals
logic sign_a;
logic sign_b;
logic out_sign;
logic [7:0] exp_a;
logic [7:0] exp_b;
logic [7:0] out_exponent;
logic [23:0] mant_a;
logic [23:0] mant_b;
logic [24:0] out_mantissa;


//------------------------------------------------------------------------------
// Child module instances

ieee754_extractor extractA
(
  .A(A),
  .sign(sign_a),
  .exponent(exp_a),
  .mantissa(mant_a)
);

ieee754_extractor extractB
(
  .A(B),
  .sign(sign_b),
  .exponent(exp_b),
  .mantissa(mant_b)
);

ieee754_adder_core adderCore
(
  .exp_a(exp_a),
  .exp_b(exp_b),
  .mant_a(mant_a),
  .mant_b(mant_b),
  .sign_a(sign_a),
  .sign_b(sign_b),
  .out_sign(out_sign),
  .out_exponent(out_exponent),
  .out_mantissa(out_mantissa)
);

ieee754_normalizer normalizer
(
  .exponent(out_exponent),
  .mantissa(out_mantissa),
  .sign(out_sign),
  .result(O)
);

endmodule



//==============================================================================
//
// Module: ieee754_extractor ()
//
module ieee754_extractor // "float_adder.extractA"
(
    input logic [31:0] A,
    output logic sign,
    output logic [7:0] exponent,
    output logic [23:0] mantissa
);

//------------------------------------------------------------------------------
// Method process: process (example.cpp:14:5) 

always_comb 
begin : process     // example.cpp:14:5
    sign = A[31];
    exponent = A[30 : 23];
    if (exponent == 0)
    begin
        mantissa = 24'({1'd0, A[22 : 0]});
    end else begin
        mantissa = 24'({1'd1, A[22 : 0]});
    end
end

endmodule



//==============================================================================
//
// Module: ieee754_adder_core ()
//
module ieee754_adder_core // "float_adder.adderCore"
(
    input logic [7:0] exp_a,
    input logic [7:0] exp_b,
    input logic [23:0] mant_a,
    input logic [23:0] mant_b,
    input logic sign_a,
    input logic sign_b,
    output logic out_sign,
    output logic [7:0] out_exponent,
    output logic [24:0] out_mantissa
);

//------------------------------------------------------------------------------
// Method process: process (example.cpp:43:5) 

always_comb 
begin : process     // example.cpp:43:5
    logic [7:0] diff;
    logic [23:0] tmp_mantissa;
    logic a_is_nan;
    logic b_is_nan;
    logic a_is_inf;
    logic b_is_inf;
    diff = 0;
    tmp_mantissa = 0;
    a_is_nan = (exp_a == 'hFF) && (mant_a[22 : 0] != 0);
    b_is_nan = (exp_b == 'hFF) && (mant_b[22 : 0] != 0);
    a_is_inf = (exp_a == 'hFF) && (mant_a[22 : 0] == 0);
    b_is_inf = (exp_b == 'hFF) && (mant_b[22 : 0] == 0);
    if (a_is_nan || b_is_nan)
    begin
        out_exponent = 'hFF;
        out_mantissa = 'h400000;
        out_sign = 0;
    end else begin
        if (a_is_inf || b_is_inf)
        begin
            if (a_is_inf && b_is_inf)
            begin
                if (sign_a == sign_b)
                begin
                    out_exponent = 'hFF;
                    out_mantissa = 0;
                    out_sign = sign_a;
                end else begin
                    out_exponent = 'hFF;
                    out_mantissa = 'h400000;
                    out_sign = 0;
                end
            end else begin
                out_exponent = 'hFF;
                out_mantissa = 0;
                out_sign = a_is_inf ? sign_a : sign_b;
            end
        end else begin
            if (exp_a == 0 && mant_a == 0)
            begin
                out_sign = sign_b;
                out_exponent = exp_b;
                out_mantissa = 25'({1'd0, mant_b});
            end else begin
                if (exp_b == 0 && mant_b == 0)
                begin
                    out_sign = sign_a;
                    out_exponent = exp_a;
                    out_mantissa = 25'({1'd0, mant_a});
                end else begin
                    if (exp_a == 0)
                    begin
                        out_exponent = exp_b;
                        tmp_mantissa = mant_a;
                    end else begin
                        if (exp_b == 0)
                        begin
                            out_exponent = exp_a;
                            tmp_mantissa = mant_b;
                        end else begin
                            out_exponent = (exp_a > exp_b) ? exp_a : exp_b;
                        end
                    end
                    if (exp_a > exp_b)
                    begin
                        diff = exp_a - exp_b;
                        tmp_mantissa = mant_b >>> diff;
                        if (sign_a == sign_b)
                        begin
                            out_mantissa = 25'({1'd0, mant_a}) + 25'({1'd0, tmp_mantissa});
                        end else begin
                            if (mant_a >= tmp_mantissa)
                            begin
                                out_mantissa = 25'({1'd0, mant_a}) - 25'({1'd0, tmp_mantissa});
                            end else begin
                                out_mantissa = 25'({1'd0, tmp_mantissa}) - 25'({1'd0, mant_a});
                            end
                        end
                        out_sign = (mant_a >= tmp_mantissa) ? sign_a : sign_b;
                    end else begin
                        if (exp_b > exp_a)
                        begin
                            diff = exp_b - exp_a;
                            tmp_mantissa = mant_a >>> diff;
                            if (sign_a == sign_b)
                            begin
                                out_mantissa = 25'({1'd0, mant_b}) + 25'({1'd0, tmp_mantissa});
                            end else begin
                                if (mant_b >= tmp_mantissa)
                                begin
                                    out_mantissa = 25'({1'd0, mant_b}) - 25'({1'd0, tmp_mantissa});
                                end else begin
                                    out_mantissa = 25'({1'd0, tmp_mantissa}) - 25'({1'd0, mant_b});
                                end
                            end
                            out_sign = (mant_b >= tmp_mantissa) ? sign_b : sign_a;
                        end else begin
                            if (sign_a == sign_b)
                            begin
                                out_mantissa = 25'({1'd0, mant_a}) + 25'({1'd0, mant_b});
                            end else begin
                                if (mant_a > mant_b)
                                begin
                                    out_mantissa = 25'({1'd0, mant_a}) - 25'({1'd0, mant_b});
                                end else begin
                                    out_mantissa = 25'({1'd0, mant_b}) - 25'({1'd0, mant_a});
                                end
                            end
                            out_sign = (mant_a > mant_b) ? sign_a : sign_b;
                        end
                    end
                    if (out_mantissa == 0)
                    begin
                        out_sign = 0;
                        out_exponent = 0;
                    end
                end
            end
        end
    end
end

endmodule



//==============================================================================
//
// Module: ieee754_normalizer ()
//
module ieee754_normalizer // "float_adder.normalizer"
(
    input logic [7:0] exponent,
    input logic [24:0] mantissa,
    input logic sign,
    output logic [31:0] result
);

//------------------------------------------------------------------------------
// Method process: process (example.cpp:166:5) 

always_comb 
begin : process     // example.cpp:166:5
    logic [4:0] lz;
    logic [7:0] norm_exponent;
    logic [24:0] norm_mantissa;
    lz = 0;
    norm_exponent = 0;
    norm_mantissa = 0;
    if (exponent == 'hFF)
    begin
        result = 32'({sign, exponent, mantissa[22 : 0]});
    end else begin
        if (mantissa == 0)
        begin
            result = 0;
        end else begin
            norm_exponent = exponent;
            norm_mantissa = mantissa;
            if (norm_mantissa[24])
            begin
                norm_exponent = norm_exponent + 1;
                norm_mantissa = norm_mantissa >>> 1;
            end else begin
                if (norm_mantissa[23] == 0 && norm_exponent != 0)
                begin
                    for (lz = 0; lz < 24 && norm_mantissa[23 - lz] == 0; lz++)
                    begin
                    end
                    if (norm_exponent > lz)
                    begin
                        norm_exponent = norm_exponent - lz;
                        norm_mantissa = norm_mantissa <<< lz;
                    end else begin
                        norm_mantissa = norm_mantissa <<< 9'(norm_exponent - 1);
                        norm_exponent = 0;
                    end
                end
            end
            if (norm_exponent >= 'hFF)
            begin
                result = 0;
            end else begin
                result = 32'({sign, norm_exponent, norm_mantissa[22 : 0]});
            end
        end
    end
end

endmodule



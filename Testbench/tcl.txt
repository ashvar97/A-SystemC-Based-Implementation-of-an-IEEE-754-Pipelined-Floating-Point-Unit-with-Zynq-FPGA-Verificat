HARDWARE TCL

# Open Hardware Manager and connect to the server
open_hw_manager
connect_hw_server

# Automatically open the first detected target (FPGA board)
open_hw_target

# Get the first FPGA device (e.g., xc7a35t_0, zynq_0, etc.)
set hw_device [lindex [get_hw_devices] 0]
current_hw_device $hw_device

# Set the bitstream file (adjust path if needed)
set_property PROGRAM.FILE ./fp_proc.bit $hw_device

# Program the FPGA
program_hw_devices $hw_device

# Refresh and close
refresh_hw_device $hw_device
close_hw_target
disconnect_hw_server
close_hw_manager

# Exit Vivado
Exit



# Cleanup
file delete -force fp_proj

# Create project (Zybo Z7-20)
create_project -force fp_proj ./fp_proj -part xc7z020clg400-1

# Add design files - using the corrected FpSystem as top module
add_files -norecurse corrected_fpsystem.sv
add_files -norecurse corrected_fpsystem_continued.sv

# Create basic constraints file
set fp [open "constraints.xdc" w]
puts $fp {
    # Clock (125MHz on Zybo Z7-20)
    set_property PACKAGE_PIN H16 [get_ports clk]
    set_property IOSTANDARD LVCMOS33 [get_ports clk]
    create_clock -period 8.000 -name sys_clk_pin -waveform {0.000 4.000} [get_ports clk]

    # Reset (Btn0)
    set_property PACKAGE_PIN R18 [get_ports reset]
    set_property IOSTANDARD LVCMOS33 [get_ports reset]

    # Stall (Btn1)
    set_property PACKAGE_PIN P16 [get_ports stall]
    set_property IOSTANDARD LVCMOS33 [get_ports stall]

    # Monitor valid output (LED)
    set_property PACKAGE_PIN M14 [get_ports monitor_valid]
    set_property IOSTANDARD LVCMOS33 [get_ports monitor_valid]

    # Monitor PC outputs (only connect the lower bits to physical LEDs)
    # Use PMOD JA for bits 0-7 of monitor_pc
    set_property PACKAGE_PIN Y18 [get_ports {monitor_pc[0]}]
    set_property PACKAGE_PIN Y19 [get_ports {monitor_pc[1]}]
    set_property PACKAGE_PIN Y16 [get_ports {monitor_pc[2]}]
    set_property PACKAGE_PIN Y17 [get_ports {monitor_pc[3]}]
    set_property PACKAGE_PIN U18 [get_ports {monitor_pc[4]}]
    set_property PACKAGE_PIN U19 [get_ports {monitor_pc[5]}]
    set_property PACKAGE_PIN W18 [get_ports {monitor_pc[6]}]
    set_property PACKAGE_PIN W19 [get_ports {monitor_pc[7]}]
    set_property IOSTANDARD LVCMOS33 [get_ports {monitor_pc[0]}]
    set_property IOSTANDARD LVCMOS33 [get_ports {monitor_pc[1]}]
    set_property IOSTANDARD LVCMOS33 [get_ports {monitor_pc[2]}]
    set_property IOSTANDARD LVCMOS33 [get_ports {monitor_pc[3]}]
    set_property IOSTANDARD LVCMOS33 [get_ports {monitor_pc[4]}]
    set_property IOSTANDARD LVCMOS33 [get_ports {monitor_pc[5]}]
    set_property IOSTANDARD LVCMOS33 [get_ports {monitor_pc[6]}]
    set_property IOSTANDARD LVCMOS33 [get_ports {monitor_pc[7]}]

    # For remaining signals, we'll set the severity of the DRC check to Warning instead of Error
    # This allows bitstream generation even though not all pins are assigned to specific locations
}
close $fp
add_files -fileset constrs_1 -norecurse constraints.xdc

# Set top module to FpSystem
set_property top FpSystem [current_fileset]

# Run synthesis
synth_design -top FpSystem -part xc7z020clg400-1 -flatten_hierarchy rebuilt -directive Default

# Check for critical warnings
set crit_warn [get_msg_config -severity {CRITICAL WARNING} -count]
if {$crit_warn > 0} {
    puts "CRITICAL WARNINGS: $crit_warn - Check log before proceeding"
}

# Set DRC severity to Warning for unconstrained IOs
set_property SEVERITY {Warning} [get_drc_checks UCIO-1]

# Implementation
opt_design -directive Explore
place_design -directive ExtraNetDelay_high
phys_opt_design -directive AggressiveExplore
route_design -directive Explore

# Timing reports
report_timing_summary -file timing.rpt
report_utilization -file utilization.rpt

# Generate bitstream
write_bitstream -force fp_proc.bit

Minimal example project using Cadence Stratus for High Level Synthesis

Stratus is only available at the two cae servers (cae00 and cae02).
Connect to one of the two machines via SSH.

To make Stratus available in your current bash, load the corresponding module:
	module load Core/cadence/stratus22_23

If you are using Stratus to do HLS for FPGAs, Vivado is also needed.
Please laod the Vivado module befor the Stratus module:
	module load Core/vivado/vivado2023.2

After that you can start the Stratus IDE inside the hls directory via the following command:
	stratus_ide

Inside the hls directory you can find the following files and directories:
	Makefile	: Additional Makefile needed for by Stratus. 
			  Please do not change, unless you know, what you are you doing.
	project.tcl	: Tcl file describing the Stratus project. 
			  Please adapt it for your own SystemC project.
	mem_lib		: Stratus needs extra definitions for memory to map arrays from SystemC code to FPGA memory cells.
			  The mem_lib contains one definition of a generic memory with one read port and one write port, mapped to BRAM of Xilinx Virtex-7 FPGAs.
			  Other memory architecture definitions can be generate inside the Stratus IDE.

The src directory contains as example SystemC project implementing a generic ringbuffer (ringbuffer.cpp ringbuffer.h).
A testbench for the module can also be found there (ringbuffer_tb.cpp ringbuffer_tb.h).

***

Using this minimal example project for your own SystemC project:
Copy the hls directory to your SystemC project and alter the containing project.tcl file as following:

Line 2:
This tcl command specifies the FPGA chip used for HLS.
Change the string inside the "" to the FPGA chip name you are working with.


Line 4:
This tcl command specifies the clock period in ns the synthesized design should run with.
Change the number if needed.


Line 8:
Each of your SystemC modules needs to be specified with it own "define_hls_module" tcl command.
Syntax: define_hls_module <module_name> {<path_to_cpp_file> <path_to_h_file>}
Parameter <module_name>		: name of the SC_Module inside the corresponding header file
Parameter <path_to_cpp_file>	: path to .cpp source file
Parameter <path_to_h_file>	: path to .h source file

See also the Stratus High-Level Synthesis Reference Guide, page 43.


Line 10:
For the actual High-Level Synthesis, for each of your SystemC modules, the following tcl command has to be specified.
Syntax: define_hls_config <module_name> <hls_config_name>
Parameter <module_name> 	: name of the SC_Module to be synthesized
Parameter <hls_config_name>	: name of the High-Level Synthesis configuration

See also the Stratus High-Level Synthesis Reference Guide, page 39.
https://www.reddit.com/r/Indians_StudyAbroad/comments/1iu0tii/why_will_indians_kill_the_german_job_market/

Extending the memory library:
This can only be done inside the IDE.
Details can be found in the Stratus High-Level Synthesis User Guide, page 900 ff.

***

The actual synthesis can be done either in the IDE or via a make command.
For the IDE, please have a look at the screenshots in the corresponding directory of this example project.
For make, just use the "make help" command to get a full list of make targets.

Stratus will your synthesize your SystemC files into a Verilog description.
The resulting files can be found here:

bdw_work/modules/<module_name>/<hls_config_name>/<module_name>_rtl.v

Please use this Verilog files in a seperate Vivado project.

***

User Guides for Stratus:
Stratus HLS User Guide		: /eda.remote/cadence/2022-23/RHELx86/STRATUS_22.01.003/doc/Stratus_HLS_User_Guide/Stratus_HLS_User_Guide.pdf
Stratus HLS Reference Guid	: /eda.remote/cadence/2022-23/RHELx86/STRATUS_22.01.003/doc/Stratus_HLS_Reference_Guide/Stratus_HLS_Reference_Guide.pdf

Both can also be accessed inside the IDE (Menu bar: Help -> Contents).
